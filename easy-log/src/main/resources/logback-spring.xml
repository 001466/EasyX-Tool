<?xml version="1.0" encoding="UTF-8"?>

<configuration debug="false">

	<springProperty scope="context" name="logging.path" source="logging.path" defaultValue="logs"/>
	<springProperty scope="context" name="spring.application.name" source="spring.application.name"/>
	<springProperty scope="context" name="logging.level.root" source="logging.level.root" defaultValue="INFO"/>



	<property name="MY_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [${spring.application.name:-},%X{X-B3-TraceId:-},%X{X-B3-SpanId:-},%X{X-Span-Export:-}] ${PID:-} --- [%thread] %logger: \t%msg%n"/>

	<!-- 控制台输出 -->
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>${MY_PATTERN}</pattern>
			<charset>UTF-8</charset>
		</encoder>
	</appender>



	<!-- 按照每天生成日志文件 -->
	<appender name="ALL_FILE"	class="ch.qos.logback.core.rolling.RollingFileAppender">

		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>${MY_PATTERN}</pattern>
			<charset>UTF-8</charset>
		</encoder>
	
		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">  
			<FileNamePattern>${logging.path}/all/${spring.application.name}.%d{yyyy-MM-dd}.%i.log</FileNamePattern>
	        <maxFileSize>64MB</maxFileSize>
	        <maxHistory>60</maxHistory>
	    </rollingPolicy>  

		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>INFO</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>ACCEPT</onMismatch>
		</filter>
	</appender>

	<!-- 异步输出 -->
	<appender name="ALL_FILE_ASYNC" class="ch.qos.logback.classic.AsyncAppender">
		<!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
		<discardingThreshold>0</discardingThreshold>
		<!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
		<queueSize>16</queueSize>
		<!-- 添加附加的appender,最多只能添加一个 -->
		<appender-ref ref="ALL_FILE" />
	</appender>

	<!-- 按照每天生成日志文件 -->
	<appender name="WARN_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">

		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>${MY_PATTERN}</pattern>
			<charset>UTF-8</charset>
		</encoder>
		
		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">  
			<!--日志文件输出的文件名 -->
			<FileNamePattern>${logging.path}/warn/${spring.application.name}.%d{yyyy-MM-dd}.%i.log</FileNamePattern>
	        <maxFileSize>64MB</maxFileSize>
	        <maxHistory>60</maxHistory>  
	    </rollingPolicy>  

		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>WARN</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		
	</appender>

	<!-- 异步输出 -->
	<appender name="WARN_FILE_ASYNC" class="ch.qos.logback.classic.AsyncAppender">
		<!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
		<discardingThreshold>0</discardingThreshold>
		<!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
		<queueSize>4</queueSize>
		<!-- 添加附加的appender,最多只能添加一个 -->
		<appender-ref ref="WARN_FILE" />
	</appender>

	<!-- 按照每天生成日志文件 -->
	<appender name="ERR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">

		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>${MY_PATTERN}</pattern>
			<charset>UTF-8</charset>
		</encoder>
		
		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">  
			<!--日志文件输出的文件名 -->
			<FileNamePattern>${logging.path}/error/${spring.application.name}.%d{yyyy-MM-dd}.%i.log</FileNamePattern>
	        <maxFileSize>64MB</maxFileSize>
	        <maxHistory>60</maxHistory>  
	    </rollingPolicy>  

		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!-- 异步输出 -->
	<appender name="ERR_FILE_ASYNC" class="ch.qos.logback.classic.AsyncAppender">
		<!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
		<discardingThreshold>0</discardingThreshold>
		<!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
		<queueSize>4</queueSize>
		<!-- 添加附加的appender,最多只能添加一个 -->
		<appender-ref ref="ERR_FILE" />
	</appender>
	


	<!--<appender name="LOGSTASH"
		class="net.logstash.logback.appender.LogstashTcpSocketAppender">
		<remoteHost>www.baidu.net</remoteHost>
		<port>9800</port>
		<encoder charset="UTF-8"
			class="net.logstash.logback.encoder.LogstashEncoder">
			<includeCallerData>true</includeCallerData>
		</encoder>
		<keepAliveDuration>5 minutes</keepAliveDuration>
		<includeCallerData>true</includeCallerData>
	</appender>-->

	<!-- 为logstash输出的JSON格式的Appender -->
	<appender name="LOGSTASH"
			  class="net.logstash.logback.appender.LogstashTcpSocketAppender">
		<destination>baidu.com:9800</destination>
		<!-- 日志输出编码 -->
		<encoder
				class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
			<providers>
				<timestamp/>
				<pattern>
					<pattern>
						{
						"timestamp": 	"%d{yyyy-MM-dd HH:mm:ss.SSS}",
						"name": 		"${spring.application.name:-}",
						"traceId": 		"%X{X-B3-TraceId:-}",
						"spanId": 		"%X{X-B3-SpanId:-}",
						"export": 		"%X{X-Span-Export:-}",
						"pid": 			"${PID:-}",
						"thread": 		"%thread",
						"class": 		"%logger",
						"level": 		"%level",
						"message": 		"%message",
 						"exception": 	"%exception{16}"
						}
					</pattern>
				</pattern>
				<stackTrace>
					<throwableConverter class="net.logstash.logback.stacktrace.ShortenedThrowableConverter">
						<maxDepthPerThrowable>1024</maxDepthPerThrowable>
						<exclude>^sun\.reflect\..*\.invoke</exclude>
						<exclude>^net\.sf\.cglib\.proxy\.MethodProxy\.invoke</exclude>
						<!--<evaluator class="myorg.MyCustomEvaluator"/>-->
						<rootCauseFirst>true</rootCauseFirst>
					</throwableConverter>
				</stackTrace>
			</providers>
		</encoder>
	</appender>

	
	<!--
	<appender name="ERR_MAIL" class="ch.qos.logback.classic.net.SMTPAppender">
	    <smtpHost>${spring.mail.host}</smtpHost>
	    <smtpPort>${spring.mail.port}</smtpPort>
	    <username>${spring.mail.username}</username>
	    <password>${spring.mail.password}</password>
	    <SSL>true</SSL>
	    <to>240018840@qq.com</to>
	    <from>${spring.mail.username}</from>
	    <subject>Customersvr Err</subject>
	    <layout class="ch.qos.logback.classic.html.HTMLLayout"/>
	    <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
	        <level>ERROR</level>
	    </filter>
	</appender>
	-->


	<!-- 日志输出级别 -->
	<root level="${logging.level.root}">

		<!-- 
		<appender-ref ref="LOGSTASH" />
		<appender-ref ref="ALL_FILE_ASYNC"/> 
		<appender-ref ref="STDOUT" /> 
			
			
		<appender-ref ref="STDOUT" />
		<appender-ref ref="HTTP" />
		<appender-ref ref="STDOUT" />

		<appender-ref ref="STDOUT" />
		<appender-ref ref="HTTP" />
		
		<appender-ref ref="ALL_FILE_ASYNC" />
		<appender-ref ref="WARN_FILE_ASYNC" />
		<appender-ref ref="ERR_FILE_ASYNC" />
		-->
		<appender-ref ref="STDOUT" />
		<appender-ref ref="ALL_FILE_ASYNC"/>
		<appender-ref ref="ERR_FILE_ASYNC" />


	</root>
</configuration>